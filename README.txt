Задание.

Stage 1.

1. Обосновать правило преобразования.
2. Обосновать правило вычисления.
3. Реализовать процедуру преобразования инфиксной записи числа в постфиксную.

Будем предполагать, что изначально в инфиксную запись входят операнды, обозначаемы маленькими латинскими буквами, знаки операций (+,-,*,/) и знаки расстановки приоритетов (круглые скобки). См. Более сложный пример. Дополнительно можно реализовать операцию ^ (возведение в степень) или другие бинарные операции.
Программа должна считывать исходное выражение из файла expression.txt и выводить его вместе с результатом преобразования на экран.

4. Реализовать процедуру вычисления постфиксного выражения.

Будем дополнительно предполагать, что в файле expression.txt помимо инфиксной записи в строках, начиная со второй, расположены записи вида
<переменная>=<значение>
из которых необходимо получить значения переменных для подстановки в выражение.
При реализации использовать написанный ранее класс Stack.
Вычисленное значение и значения переменных необходимо вывести на экран (в читаемом виде).

Stage  2.

5. Дополним список арифметических операций ещё дополнительными функциями:
    а) "^" -- возведение в степень;
    б) тригонометрические функции (sin, cos, tan, cot, asin, acos, atan, acot);
    в) показательные функции (exp, ln);
    г) степенные функции (sqrt - квадратный корень, sqrt3 - кубический корень).

6. Не будем успокаиваться и введем ещё и массивы.

Будем дополнительно предполагать, что в файле expression.txt помимо инфиксной записи и значений переменных содержаться следующие записи
<имя массива>[]=<список элементов числового массива через пробел>

7. Реализовать процедуру перевода инфиксного выражения в постфиксную запись. При этом полагаем, что обращение к элементу массива - это бинарная операция.
8. Реализовать процедуру вычисления постфиксного выражения.
